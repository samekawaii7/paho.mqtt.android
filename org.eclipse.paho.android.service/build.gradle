apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

configurations.implementation.canBeResolved = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 31

        testApplicationId "org.eclipse.paho.android.service.test"
    }

    lintOptions {
        abortOnError false
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
}

repositories {
    maven { url rootProject.ext.mavenUrl }
}


android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        doFirst {
            ext.androidJar =
                    "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompileProvider.get().classpath.files) + files(ext.androidJar)
        }
        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        // source = variant.javaCompileProvider.get()
        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://d.android.com/reference/")
        exclude '**/BuildConfig*'
        exclude '**/R**'
        // options.linkSource false
        failOnError false
    }
}

dependencies {
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${rootProject.ext.clientVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

// Generate Sources Jar
task("generateSourcesJar", type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

// Copy the Paho Java client into the libs directory to bundle it with the AAR
task("copyLibs", type: Copy) {
    from configurations.implementation
    into 'libs'
    include 'org.eclipse.paho*'

    doLast {
        println "Copying MQTT Jar into libs directory"
    }
}

// Renames the Release AAR file to a maven convention
task("renameReleaseAAR", type: Copy, dependsOn: ['bundleDebugAar', 'copyLibs']) {
    from("$buildDir/outputs/aar")
    into("$buildDir/outputs/aar/")
    include('org.eclipse.paho.android.service-debug.aar')
    rename('org.eclipse.paho.android.service-debug.aar', rootProject.ext.serviceArchivesBaseName + '-' + rootProject.ext.serviceVersion + '.aar')
}

// Generate Plain Jar Version of library (good for legacy users)
task("generateLibraryJar", type: Jar) {
    from("$buildDir/intermediates/javac/release/classes")
}

// Generate Javadoc
task("generateJavaDocJar", type: Jar, dependsOn: (rootProject.ext.serviceVersion.endsWith('-SNAPSHOT') ? 'generatedebugJavadoc' : 'generatereleaseJavadoc')){
    from("$buildDir/docs/javadoc")
    archiveClassifier.set("javadoc")
}

project.afterEvaluate {
    publishing {
        publications {
            paho(MavenPublication) {
                groupId 'org.eclipse.paho'
                artifact generateSourcesJar
                artifact generateLibraryJar
                artifact generateJavaDocJar
                artifact "$buildDir/outputs/aar/" + rootProject.ext.serviceArchivesBaseName + "-" + rootProject.ext.serviceVersion + ".aar"
            }
        }
    }
}


task deleteLibs {
    delete 'libs'
}

tasks.clean.dependsOn(deleteLibs)

tasks.assemble.dependsOn(renameReleaseAAR)
